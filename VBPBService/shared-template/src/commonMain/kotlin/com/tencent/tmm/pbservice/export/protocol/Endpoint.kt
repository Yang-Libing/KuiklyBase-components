// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.tencent.tmm.pbservice.export.protocol.Endpoint in v_b_dispatch.proto
package com.tencent.tmm.pbservice.export.protocol

import com.squareup.wire.kmm.FieldEncoding
import com.squareup.wire.kmm.Message
import com.squareup.wire.kmm.ProtoAdapter
import com.squareup.wire.kmm.ProtoReader
import com.squareup.wire.kmm.ProtoWriter
import com.squareup.wire.kmm.ReverseProtoWriter
import com.squareup.wire.kmm.Syntax.PROTO_3
import com.squareup.wire.kmm.WireField
import com.squareup.wire.kmm.`internal`.sanitize
import okio.ByteString
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Unit
import kotlin.jvm.JvmField

/**
 * 调度服务的请求和回包封装协议
 * 请求协议：DispatchRequest
 * 回包协议：DispatchResponse
 *
 * 调度单元 - 指在调度平台接入时分配的ID,或关联的域名（即可以根据ID或域名查调度结果）
 */
public class Endpoint(
  /**
   * IP
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  public val ip: String = "",
  /**
   * 主备类型 1 主 2 备 (主是最优IP，备是次优IP）
   */
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY
  )
  public val type: Int = 0,
  /**
   * 端口(目前只支持统一的端口)
   */
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY
  )
  public val port: Int = 0,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<Endpoint, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  public override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is Endpoint) return false
    if (unknownFields != other.unknownFields) return false
    if (ip != other.ip) return false
    if (type != other.type) return false
    if (port != other.port) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + (ip?.hashCode() ?: 0)
      result = result * 37 + (type?.hashCode() ?: 0)
      result = result * 37 + (port?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    result += """ip=${sanitize(ip)}"""
    result += """type=$type"""
    result += """port=$port"""
    return result.joinToString(prefix = "Endpoint{", separator = ", ", postfix = "}")
  }

  public fun copy(
    ip: String = this.ip,
    type: Int = this.type,
    port: Int = this.port,
    unknownFields: ByteString = this.unknownFields
  ): Endpoint = Endpoint(ip, type, port, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<Endpoint> = object : ProtoAdapter<Endpoint>(
      FieldEncoding.LENGTH_DELIMITED, 
      Endpoint::class,
      "type.googleapis.com/com.tencent.tmm.pbservice.export.protocol.Endpoint",
      PROTO_3, 
      null
    ) {
      public override fun encodedSize(`value`: Endpoint): Int {
        var size = value.unknownFields.size
        if (value.ip != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.ip)
        if (value.type != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(2, value.type)
        if (value.port != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(3, value.port)
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: Endpoint): Unit {
        if (value.ip != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.ip)
        if (value.type != 0) ProtoAdapter.INT32.encodeWithTag(writer, 2, value.type)
        if (value.port != 0) ProtoAdapter.INT32.encodeWithTag(writer, 3, value.port)
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter, `value`: Endpoint): Unit {
        writer.writeBytes(value.unknownFields)
        if (value.port != 0) ProtoAdapter.INT32.encodeWithTag(writer, 3, value.port)
        if (value.type != 0) ProtoAdapter.INT32.encodeWithTag(writer, 2, value.type)
        if (value.ip != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.ip)
      }

      public override fun decode(reader: ProtoReader): Endpoint {
        var ip: String = ""
        var type: Int = 0
        var port: Int = 0
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> ip = ProtoAdapter.STRING.decode(reader)
            2 -> type = ProtoAdapter.INT32.decode(reader)
            3 -> port = ProtoAdapter.INT32.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return Endpoint(
          ip = ip,
          type = type,
          port = port,
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: Endpoint): Endpoint = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
