// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.tencent.tmm.pbservice.export.protocol.DispatchUnitResult in v_b_dispatch.proto
package com.tencent.tmm.pbservice.export.protocol

import com.squareup.wire.kmm.FieldEncoding
import com.squareup.wire.kmm.Message
import com.squareup.wire.kmm.ProtoAdapter
import com.squareup.wire.kmm.ProtoReader
import com.squareup.wire.kmm.ProtoWriter
import com.squareup.wire.kmm.ReverseProtoWriter
import com.squareup.wire.kmm.Syntax.PROTO_3
import com.squareup.wire.kmm.WireField
import com.squareup.wire.kmm.`internal`.immutableCopyOf
import com.squareup.wire.kmm.`internal`.redactElements
import com.squareup.wire.kmm.`internal`.sanitize
import okio.ByteString
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.Map
import kotlin.jvm.JvmField
import kotlin.lazy

public class DispatchUnitResult(
  /**
   * 0为成功，其他为失败
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY
  )
  public val code: Int = 0,
  /**
   * 协议 0 不需求确定协议 1 tcp  2 http 3 quic 4 udp （默认为0）
   */
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY
  )
  public val protocol: Int = 0,
  /**
   * 调度规则版本号
   */
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  public val dispVersion: String = "",
  domains: List<String> = emptyList(),
  endpoints: List<Endpoint> = emptyList(),
  v6Endpoints: List<Endpoint> = emptyList(),
  guarantees: List<Endpoint> = emptyList(),
  v6Guarantees: List<Endpoint> = emptyList(),
  extra: Map<String, String> = emptyMap(),
  unknownFields: ByteString = ByteString.EMPTY
) : Message<DispatchUnitResult, Nothing>(ADAPTER, unknownFields) {
  /**
   * 调度单元关联的域名列表
   */
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.REPEATED
  )
  public val domains: List<String> = immutableCopyOf("domains", domains)

  /**
   * 节点列表（IPV4,包括了主备VIP）
   */
  @field:WireField(
    tag = 5,
    adapter = "com.tencent.tmm.pbservice.export.protocol.Endpoint#ADAPTER",
    label = WireField.Label.REPEATED
  )
  public val endpoints: List<Endpoint> = immutableCopyOf("endpoints", endpoints)

  /**
   * 节点列表(IPV6,包括了主备VIP）
   */
  @field:WireField(
    tag = 6,
    adapter = "com.tencent.tmm.pbservice.export.protocol.Endpoint#ADAPTER",
    label = WireField.Label.REPEATED
  )
  public val v6Endpoints: List<Endpoint> = immutableCopyOf("v6Endpoints", v6Endpoints)

  /**
   * 保底BGP（特殊用途,一般为空）
   */
  @field:WireField(
    tag = 7,
    adapter = "com.tencent.tmm.pbservice.export.protocol.Endpoint#ADAPTER",
    label = WireField.Label.REPEATED
  )
  public val guarantees: List<Endpoint> = immutableCopyOf("guarantees", guarantees)

  /**
   * 保底BGP(IPV6,特殊用途,一般为空）
   */
  @field:WireField(
    tag = 8,
    adapter = "com.tencent.tmm.pbservice.export.protocol.Endpoint#ADAPTER",
    label = WireField.Label.REPEATED
  )
  public val v6Guarantees: List<Endpoint> = immutableCopyOf("v6Guarantees", v6Guarantees)

  /**
   * 预留用的扩展字段
   */
  @field:WireField(
    tag = 9,
    keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
    adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public val extra: Map<String, String> = immutableCopyOf("extra", extra)

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  public override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is DispatchUnitResult) return false
    if (unknownFields != other.unknownFields) return false
    if (code != other.code) return false
    if (protocol != other.protocol) return false
    if (dispVersion != other.dispVersion) return false
    if (domains != other.domains) return false
    if (endpoints != other.endpoints) return false
    if (v6Endpoints != other.v6Endpoints) return false
    if (guarantees != other.guarantees) return false
    if (v6Guarantees != other.v6Guarantees) return false
    if (extra != other.extra) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + (code?.hashCode() ?: 0)
      result = result * 37 + (protocol?.hashCode() ?: 0)
      result = result * 37 + (dispVersion?.hashCode() ?: 0)
      result = result * 37 + domains.hashCode()
      result = result * 37 + endpoints.hashCode()
      result = result * 37 + v6Endpoints.hashCode()
      result = result * 37 + guarantees.hashCode()
      result = result * 37 + v6Guarantees.hashCode()
      result = result * 37 + extra.hashCode()
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    result += """code=$code"""
    result += """protocol=$protocol"""
    result += """dispVersion=${sanitize(dispVersion)}"""
    if (domains.isNotEmpty()) result += """domains=${sanitize(domains)}"""
    if (endpoints.isNotEmpty()) result += """endpoints=$endpoints"""
    if (v6Endpoints.isNotEmpty()) result += """v6Endpoints=$v6Endpoints"""
    if (guarantees.isNotEmpty()) result += """guarantees=$guarantees"""
    if (v6Guarantees.isNotEmpty()) result += """v6Guarantees=$v6Guarantees"""
    if (extra.isNotEmpty()) result += """extra=$extra"""
    return result.joinToString(prefix = "DispatchUnitResult{", separator = ", ", postfix = "}")
  }

  public fun copy(
    code: Int = this.code,
    protocol: Int = this.protocol,
    dispVersion: String = this.dispVersion,
    domains: List<String> = this.domains,
    endpoints: List<Endpoint> = this.endpoints,
    v6Endpoints: List<Endpoint> = this.v6Endpoints,
    guarantees: List<Endpoint> = this.guarantees,
    v6Guarantees: List<Endpoint> = this.v6Guarantees,
    extra: Map<String, String> = this.extra,
    unknownFields: ByteString = this.unknownFields
  ): DispatchUnitResult = DispatchUnitResult(code, protocol, dispVersion, domains, endpoints,
      v6Endpoints, guarantees, v6Guarantees, extra, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<DispatchUnitResult> = object :
        ProtoAdapter<DispatchUnitResult>(
      FieldEncoding.LENGTH_DELIMITED, 
      DispatchUnitResult::class,
      "type.googleapis.com/com.tencent.tmm.pbservice.export.protocol.DispatchUnitResult",
      PROTO_3, 
      null
    ) {
      private val extraAdapter: ProtoAdapter<Map<String, String>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, ProtoAdapter.STRING) }

      public override fun encodedSize(`value`: DispatchUnitResult): Int {
        var size = value.unknownFields.size
        if (value.code != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(1, value.code)
        if (value.protocol != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(2, value.protocol)
        if (value.dispVersion != "") size += ProtoAdapter.STRING.encodedSizeWithTag(3,
            value.dispVersion)
        size += ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(4, value.domains)
        size += Endpoint.ADAPTER.asRepeated().encodedSizeWithTag(5, value.endpoints)
        size += Endpoint.ADAPTER.asRepeated().encodedSizeWithTag(6, value.v6Endpoints)
        size += Endpoint.ADAPTER.asRepeated().encodedSizeWithTag(7, value.guarantees)
        size += Endpoint.ADAPTER.asRepeated().encodedSizeWithTag(8, value.v6Guarantees)
        size += extraAdapter.encodedSizeWithTag(9, value.extra)
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: DispatchUnitResult): Unit {
        if (value.code != 0) ProtoAdapter.INT32.encodeWithTag(writer, 1, value.code)
        if (value.protocol != 0) ProtoAdapter.INT32.encodeWithTag(writer, 2, value.protocol)
        if (value.dispVersion != "") ProtoAdapter.STRING.encodeWithTag(writer, 3, value.dispVersion)
        ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 4, value.domains)
        Endpoint.ADAPTER.asRepeated().encodeWithTag(writer, 5, value.endpoints)
        Endpoint.ADAPTER.asRepeated().encodeWithTag(writer, 6, value.v6Endpoints)
        Endpoint.ADAPTER.asRepeated().encodeWithTag(writer, 7, value.guarantees)
        Endpoint.ADAPTER.asRepeated().encodeWithTag(writer, 8, value.v6Guarantees)
        extraAdapter.encodeWithTag(writer, 9, value.extra)
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter, `value`: DispatchUnitResult): Unit {
        writer.writeBytes(value.unknownFields)
        extraAdapter.encodeWithTag(writer, 9, value.extra)
        Endpoint.ADAPTER.asRepeated().encodeWithTag(writer, 8, value.v6Guarantees)
        Endpoint.ADAPTER.asRepeated().encodeWithTag(writer, 7, value.guarantees)
        Endpoint.ADAPTER.asRepeated().encodeWithTag(writer, 6, value.v6Endpoints)
        Endpoint.ADAPTER.asRepeated().encodeWithTag(writer, 5, value.endpoints)
        ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 4, value.domains)
        if (value.dispVersion != "") ProtoAdapter.STRING.encodeWithTag(writer, 3, value.dispVersion)
        if (value.protocol != 0) ProtoAdapter.INT32.encodeWithTag(writer, 2, value.protocol)
        if (value.code != 0) ProtoAdapter.INT32.encodeWithTag(writer, 1, value.code)
      }

      public override fun decode(reader: ProtoReader): DispatchUnitResult {
        var code: Int = 0
        var protocol: Int = 0
        var dispVersion: String = ""
        val domains = mutableListOf<String>()
        val endpoints = mutableListOf<Endpoint>()
        val v6Endpoints = mutableListOf<Endpoint>()
        val guarantees = mutableListOf<Endpoint>()
        val v6Guarantees = mutableListOf<Endpoint>()
        val extra = mutableMapOf<String, String>()
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> code = ProtoAdapter.INT32.decode(reader)
            2 -> protocol = ProtoAdapter.INT32.decode(reader)
            3 -> dispVersion = ProtoAdapter.STRING.decode(reader)
            4 -> domains.add(ProtoAdapter.STRING.decode(reader))
            5 -> endpoints.add(Endpoint.ADAPTER.decode(reader))
            6 -> v6Endpoints.add(Endpoint.ADAPTER.decode(reader))
            7 -> guarantees.add(Endpoint.ADAPTER.decode(reader))
            8 -> v6Guarantees.add(Endpoint.ADAPTER.decode(reader))
            9 -> extra.putAll(extraAdapter.decode(reader))
            else -> reader.readUnknownField(tag)
          }
        }
        return DispatchUnitResult(
          code = code,
          protocol = protocol,
          dispVersion = dispVersion,
          domains = domains,
          endpoints = endpoints,
          v6Endpoints = v6Endpoints,
          guarantees = guarantees,
          v6Guarantees = v6Guarantees,
          extra = extra,
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: DispatchUnitResult): DispatchUnitResult = value.copy(
        endpoints = value.endpoints.redactElements(Endpoint.ADAPTER),
        v6Endpoints = value.v6Endpoints.redactElements(Endpoint.ADAPTER),
        guarantees = value.guarantees.redactElements(Endpoint.ADAPTER),
        v6Guarantees = value.v6Guarantees.redactElements(Endpoint.ADAPTER),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
