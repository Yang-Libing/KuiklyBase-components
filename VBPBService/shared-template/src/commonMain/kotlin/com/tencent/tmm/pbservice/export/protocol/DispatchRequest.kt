// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.tencent.tmm.pbservice.export.protocol.DispatchRequest in v_b_dispatch.proto
package com.tencent.tmm.pbservice.export.protocol

import com.squareup.wire.kmm.FieldEncoding
import com.squareup.wire.kmm.Message
import com.squareup.wire.kmm.ProtoAdapter
import com.squareup.wire.kmm.ProtoReader
import com.squareup.wire.kmm.ProtoWriter
import com.squareup.wire.kmm.ReverseProtoWriter
import com.squareup.wire.kmm.Syntax.PROTO_3
import com.squareup.wire.kmm.WireField
import com.squareup.wire.kmm.`internal`.immutableCopyOf
import com.squareup.wire.kmm.`internal`.sanitize
import okio.ByteString
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.Map
import kotlin.jvm.JvmField
import kotlin.lazy

public class DispatchRequest(
  /**
   * 业务标记，一般是业务英文名称，无实际用途，主要是为了方便对日志
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  public val appKey: String = "",
  /**
   * 无实际用途，主要是为了方便对日志查问题
   */
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  public val requestId: String = "",
  /**
   * 可选的，业务的用户ID, 主要是为了方便对日志查问题
   */
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  public val uuid: String = "",
  dispUnits: List<String> = emptyList(),
  /**
   * 可选参数，一般不用填
   * 运营商,可选的
   */
  @field:WireField(
    tag = 5,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  public val oper: String = "",
  extra: Map<String, String> = emptyMap(),
  unknownFields: ByteString = ByteString.EMPTY
) : Message<DispatchRequest, Nothing>(ADAPTER, unknownFields) {
  /**
   * 调度单元的列表，有两种方式：
   * 1.由调度平台分配的ID，一个调度可以关联到多个域名，见DispatchProtoResult.domains
   * 2.直接使用域名做为调度单元
   */
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.REPEATED
  )
  public val dispUnits: List<String> = immutableCopyOf("dispUnits", dispUnits)

  /**
   * 扩展字段，,可不填
   */
  @field:WireField(
    tag = 6,
    keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
    adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public val extra: Map<String, String> = immutableCopyOf("extra", extra)

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  public override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is DispatchRequest) return false
    if (unknownFields != other.unknownFields) return false
    if (appKey != other.appKey) return false
    if (requestId != other.requestId) return false
    if (uuid != other.uuid) return false
    if (dispUnits != other.dispUnits) return false
    if (oper != other.oper) return false
    if (extra != other.extra) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + (appKey?.hashCode() ?: 0)
      result = result * 37 + (requestId?.hashCode() ?: 0)
      result = result * 37 + (uuid?.hashCode() ?: 0)
      result = result * 37 + dispUnits.hashCode()
      result = result * 37 + (oper?.hashCode() ?: 0)
      result = result * 37 + extra.hashCode()
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    result += """appKey=${sanitize(appKey)}"""
    result += """requestId=${sanitize(requestId)}"""
    result += """uuid=${sanitize(uuid)}"""
    if (dispUnits.isNotEmpty()) result += """dispUnits=${sanitize(dispUnits)}"""
    result += """oper=${sanitize(oper)}"""
    if (extra.isNotEmpty()) result += """extra=$extra"""
    return result.joinToString(prefix = "DispatchRequest{", separator = ", ", postfix = "}")
  }

  public fun copy(
    appKey: String = this.appKey,
    requestId: String = this.requestId,
    uuid: String = this.uuid,
    dispUnits: List<String> = this.dispUnits,
    oper: String = this.oper,
    extra: Map<String, String> = this.extra,
    unknownFields: ByteString = this.unknownFields
  ): DispatchRequest = DispatchRequest(appKey, requestId, uuid, dispUnits, oper, extra,
      unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<DispatchRequest> = object : ProtoAdapter<DispatchRequest>(
      FieldEncoding.LENGTH_DELIMITED,
      DispatchRequest::class,
      "type.googleapis.com/com.tencent.tmm.pbservice.export.protocol.DispatchRequest",
      PROTO_3, 
      null
    ) {
      private val extraAdapter: ProtoAdapter<Map<String, String>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, ProtoAdapter.STRING) }

      public override fun encodedSize(`value`: DispatchRequest): Int {
        var size = value.unknownFields.size
        if (value.appKey != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.appKey)
        if (value.requestId != "") size += ProtoAdapter.STRING.encodedSizeWithTag(2,
            value.requestId)
        if (value.uuid != "") size += ProtoAdapter.STRING.encodedSizeWithTag(3, value.uuid)
        size += ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(4, value.dispUnits)
        if (value.oper != "") size += ProtoAdapter.STRING.encodedSizeWithTag(5, value.oper)
        size += extraAdapter.encodedSizeWithTag(6, value.extra)
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: DispatchRequest): Unit {
        if (value.appKey != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.appKey)
        if (value.requestId != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.requestId)
        if (value.uuid != "") ProtoAdapter.STRING.encodeWithTag(writer, 3, value.uuid)
        ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 4, value.dispUnits)
        if (value.oper != "") ProtoAdapter.STRING.encodeWithTag(writer, 5, value.oper)
        extraAdapter.encodeWithTag(writer, 6, value.extra)
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter, `value`: DispatchRequest): Unit {
        writer.writeBytes(value.unknownFields)
        extraAdapter.encodeWithTag(writer, 6, value.extra)
        if (value.oper != "") ProtoAdapter.STRING.encodeWithTag(writer, 5, value.oper)
        ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 4, value.dispUnits)
        if (value.uuid != "") ProtoAdapter.STRING.encodeWithTag(writer, 3, value.uuid)
        if (value.requestId != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.requestId)
        if (value.appKey != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.appKey)
      }

      public override fun decode(reader: ProtoReader): DispatchRequest {
        var appKey: String = ""
        var requestId: String = ""
        var uuid: String = ""
        val dispUnits = mutableListOf<String>()
        var oper: String = ""
        val extra = mutableMapOf<String, String>()
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> appKey = ProtoAdapter.STRING.decode(reader)
            2 -> requestId = ProtoAdapter.STRING.decode(reader)
            3 -> uuid = ProtoAdapter.STRING.decode(reader)
            4 -> dispUnits.add(ProtoAdapter.STRING.decode(reader))
            5 -> oper = ProtoAdapter.STRING.decode(reader)
            6 -> extra.putAll(extraAdapter.decode(reader))
            else -> reader.readUnknownField(tag)
          }
        }
        return DispatchRequest(
          appKey = appKey,
          requestId = requestId,
          uuid = uuid,
          dispUnits = dispUnits,
          oper = oper,
          extra = extra,
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: DispatchRequest): DispatchRequest = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
