// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.tencent.tmm.pbservice.export.protocol.DispatchResponse in v_b_dispatch.proto
package com.tencent.tmm.pbservice.export.protocol

import com.squareup.wire.kmm.FieldEncoding
import com.squareup.wire.kmm.Message
import com.squareup.wire.kmm.ProtoAdapter
import com.squareup.wire.kmm.ProtoReader
import com.squareup.wire.kmm.ProtoWriter
import com.squareup.wire.kmm.ReverseProtoWriter
import com.squareup.wire.kmm.Syntax.PROTO_3
import com.squareup.wire.kmm.WireField
import com.squareup.wire.kmm.`internal`.immutableCopyOf
import com.squareup.wire.kmm.`internal`.redactElements
import com.squareup.wire.kmm.`internal`.sanitize
import okio.ByteString
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Unit
import kotlin.collections.Map
import kotlin.jvm.JvmField
import kotlin.lazy

public class DispatchResponse(
  /**
   * 返回结果，0为成功，其他为失败
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY
  )
  public val code: Int = 0,
  unitResults: Map<String, DispatchUnitResult> = emptyMap(),
  /**
   * 后台返回出口IP地理信息，便于客户端定位调度问题
   */
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  public val ipInfo: String = "",
  extra: Map<String, String> = emptyMap(),
  unknownFields: ByteString = ByteString.EMPTY
) : Message<DispatchResponse, Nothing>(ADAPTER, unknownFields) {
  /**
   * 每个调度单元的调度结果
   */
  @field:WireField(
    tag = 2,
    keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
    adapter = "com.tencent.tmm.pbservice.export.protocol.DispatchUnitResult#ADAPTER"
  )
  public val unitResults: Map<String, DispatchUnitResult> = immutableCopyOf("unitResults",
      unitResults)

  /**
   * 预留用的扩展字段
   */
  @field:WireField(
    tag = 4,
    keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
    adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public val extra: Map<String, String> = immutableCopyOf("extra", extra)

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  public override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is DispatchResponse) return false
    if (unknownFields != other.unknownFields) return false
    if (code != other.code) return false
    if (unitResults != other.unitResults) return false
    if (ipInfo != other.ipInfo) return false
    if (extra != other.extra) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + (code?.hashCode() ?: 0)
      result = result * 37 + unitResults.hashCode()
      result = result * 37 + (ipInfo?.hashCode() ?: 0)
      result = result * 37 + extra.hashCode()
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    result += """code=$code"""
    if (unitResults.isNotEmpty()) result += """unitResults=$unitResults"""
    result += """ipInfo=${sanitize(ipInfo)}"""
    if (extra.isNotEmpty()) result += """extra=$extra"""
    return result.joinToString(prefix = "DispatchResponse{", separator = ", ", postfix = "}")
  }

  public fun copy(
    code: Int = this.code,
    unitResults: Map<String, DispatchUnitResult> = this.unitResults,
    ipInfo: String = this.ipInfo,
    extra: Map<String, String> = this.extra,
    unknownFields: ByteString = this.unknownFields
  ): DispatchResponse = DispatchResponse(code, unitResults, ipInfo, extra, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<DispatchResponse> = object : ProtoAdapter<DispatchResponse>(
      FieldEncoding.LENGTH_DELIMITED, 
      DispatchResponse::class,
      "type.googleapis.com/com.tencent.tmm.pbservice.export.protocol.DispatchResponse",
      PROTO_3, 
      null
    ) {
      private val unitResultsAdapter: ProtoAdapter<Map<String, DispatchUnitResult>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, DispatchUnitResult.ADAPTER) }

      private val extraAdapter: ProtoAdapter<Map<String, String>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, ProtoAdapter.STRING) }

      public override fun encodedSize(`value`: DispatchResponse): Int {
        var size = value.unknownFields.size
        if (value.code != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(1, value.code)
        size += unitResultsAdapter.encodedSizeWithTag(2, value.unitResults)
        if (value.ipInfo != "") size += ProtoAdapter.STRING.encodedSizeWithTag(3, value.ipInfo)
        size += extraAdapter.encodedSizeWithTag(4, value.extra)
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: DispatchResponse): Unit {
        if (value.code != 0) ProtoAdapter.INT32.encodeWithTag(writer, 1, value.code)
        unitResultsAdapter.encodeWithTag(writer, 2, value.unitResults)
        if (value.ipInfo != "") ProtoAdapter.STRING.encodeWithTag(writer, 3, value.ipInfo)
        extraAdapter.encodeWithTag(writer, 4, value.extra)
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter, `value`: DispatchResponse): Unit {
        writer.writeBytes(value.unknownFields)
        extraAdapter.encodeWithTag(writer, 4, value.extra)
        if (value.ipInfo != "") ProtoAdapter.STRING.encodeWithTag(writer, 3, value.ipInfo)
        unitResultsAdapter.encodeWithTag(writer, 2, value.unitResults)
        if (value.code != 0) ProtoAdapter.INT32.encodeWithTag(writer, 1, value.code)
      }

      public override fun decode(reader: ProtoReader): DispatchResponse {
        var code: Int = 0
        val unitResults = mutableMapOf<String, DispatchUnitResult>()
        var ipInfo: String = ""
        val extra = mutableMapOf<String, String>()
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> code = ProtoAdapter.INT32.decode(reader)
            2 -> unitResults.putAll(unitResultsAdapter.decode(reader))
            3 -> ipInfo = ProtoAdapter.STRING.decode(reader)
            4 -> extra.putAll(extraAdapter.decode(reader))
            else -> reader.readUnknownField(tag)
          }
        }
        return DispatchResponse(
          code = code,
          unitResults = unitResults,
          ipInfo = ipInfo,
          extra = extra,
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: DispatchResponse): DispatchResponse = value.copy(
        unitResults = value.unitResults.redactElements(DispatchUnitResult.ADAPTER),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
